# used for generating external urls
CBU_SERVER_NAME: {{ SERVER_NAME }}

# example: my_mongodb
MONGODB_DB: {{ MONGODB_DB }}
# example: mongohq.com
MONGODB_HOST: {{ MONGODB_HOST }}
# example: 10074
MONGODB_PORT: {{ MONGODB_PORT }}
# example: user
MONGODB_USERNAME: {{ MONGODB_USERNAME }}
# example: pass
MONGODB_PASSWORD: {{ MONGODB_PASSWORD }}

# If you enable Debug, errors will flow up to the UI and be visible.
# If you disable Debug, the end user will always get a nice 500 server error
# example: True
DEBUG: {{ DEBUG }}

# needed to make secure flask communication
# example: flasksecret
SECRET_KEY: {{ SECRET_KEY }}
# keep this true it tracks when users logged in, etc
# example: True
SECURITY_TRACKABLE: {{ SECURITY_TRACKABLE }}
# lets users recover their passwords through email
# example: True
SECURITY_RECOVERABLE: {{ SECURITY_RECOVERABLE }}
# example: 'Reset your changeby.us password'
SECURITY_EMAIL_SUBJECT_PASSWORD_RESET: {{ SECURITY_EMAIL_SUBJECT_PASSWORD_RESET }}
# example: sha512_crypt
SECURITY_PASSWORD_HASH: {{ SECURITY_PASSWORD_HASH }}
# a salt for the passwords
# example: customwebsitesalt
SECURITY_PASSWORD_SALT: {{ SECURITY_PASSWORD_SALT }}
SECURITY_LOGOUT_URL: {{SECURITY_LOGOUT_URL}}
SECURITY_LOGIN_URL: {{SECURITY_LOGIN_URL}}

# to allow flask security to send emails you will need to get an email account
# and configure it with these settings
# example: 'smtp.gmail.com'
MAIL_SERVER: {{ MAIL_SERVER }}
# example: 465
MAIL_PORT: {{ MAIL_PORT }}
# example: True
MAIL_USE_SSL: {{ MAIL_USE_SSL }}
# example: my.gmail.login
MAIL_USERNAME: {{ MAIL_USERNAME }}
# who is sending the email, should probably be same as mail_username
MAIL_DEFAULT_SENDER: {{ MAIL_DEFAULT_SENDER }}
# example: my.gmail.password
MAIL_PASSWORD: {{ MAIL_PASSWORD }}

# set this to false until we integrate flask WTF
CSRF_ENABLED: {{ CSRF_ENABLED }}

# max size for content (image) in bytes
# 3145728 = 3 mb
# example: 3145728
MAX_CONTENT_LENGTH: {{ MAX_CONTENT_LENGTH }}


### flask CDN rackspace
# force CDN to operate remotely
CDN_DEBUG: {{ CDN_DEBUG }}
# USE HTTPS?  For rackspace not recommended
CDN_HTTPS: {{ CDN_HTTPS }}
# Our flask-cdn fork can handle basic url forwarding or some
# more advanced logic regarding rackspace
CDN_USE_RACKSPACE:  {{ CDN_USE_RACKSPACE }}
# the rackspace settings
CDN_RACKSPACE_USERNAME: {{ CDN_RACKSPACE_USERNAME }}
# the rackspace key
CDN_RACKSPACE_KEY: {{ CDN_RACKSPACE_KEY }}
# the container name for this project
CDN_RACKSPACE_CONTAINER: {{ CDN_RACKSPACE_CONTAINER }}
# the region the container should reside
CDN_RACKSPACE_REGION: {{ CDN_RACKSPACE_REGION }}
# the local dir we store our images
CDN_HOSTED_IMAGES_LOCAL_DIR: {{ CDN_HOSTED_IMAGES_LOCAL_DIR }}
# list of allowed image extensions such as
# ['.jpg', '.gif', '.png', '.jpeg', '.jpe', '.svg', '.bmp']
CDN_ALLOWED_EXTENSIONS: {{ CDN_ALLOWED_EXTENSIONS }}


# note that this image is expected in different sizes.  
# Check helpers.py for info.
# example: 
#    name: Honeycomb.jpg, expect: 1020.320.Honeycomb.jpg 160.50.Honeycomb.jpg   300.94.Honeycomb.jpg
DEFAULT_PROJECT_IMAGE: {{ DEFAULT_PROJECT_IMAGE }}
DEFAULT_USER_IMAGE: {{ DEFAULT_USER_IMAGE }}

# flask logging settings
LOGGING:
    # example: 25
    SIZE_MB: {{ LOGGING_SIZE_MB }}
    # example: Debug
    LEVEL: {{ LOGGING_LEVEL }}
    # example: 10
    ROTATIONS: {{ LOGGING_ROTATIONS }}
    # example 'cbu.log'
    NAME: {{ LOGGING_NAME }}

# our encryption settings, uses a split key method to encrypt 
# social platform keys.  This can be disabled
ENCRYPTION:
    # Once you turn Encryption on you should not turn it off
    # example: True
    ENABLED: {{ ENCRYPTION_ENABLED }}
    # example: 'AES'
    TYPE: '{{ ENCRYPTION_TYPE }}'
    # example: '535bfgffsgsfgfgf'
    LOCAL_KEY: {{ ENCRYPTION_LOCAL_KEY }}
    # example: 'https://a-website.com/path/to/your/remote/key.txt'
    REMOTE_KEY_URL: {{ ENCRYPTION_REMOTE_KEY_URL }}
    # example: '53535999333'
    IV: '{{ ENCRYPTION_IV }}'



# the facebook app will need to be made public (no sandbox mode) and have
# publish_stream permissions
FACEBOOK:
    CONSUMER_KEY: {{ FACEBOOK_CONSUMER_KEY }}
    CONSUMER_SECRET: {{ FACEBOOK_CONSUMER_SECRET }}

# You need to create a twitter application so users can sign in through twitter and
# post to twitter through cbu. Take those credentials and put them here.
# the twitter app will need to have read and write permission
TWITTER:
    CONSUMER_KEY: {{ TWITTER_CONSUMER_KEY }}
    CONSUMER_SECRET: {{ TWITTER_CONSUMER_SECRET }}

# bitly is used to shorten urls when we post to social media
# you need an account login/api here
BITLY:
    LOGIN: {{ BITLY_LOGIN }}
    API_KEY: {{ BITLY_API_KEY }}

GEONAMES:
    #use the JSON endpoint (e.g. postalCodeSearchJSON? )
    SEARCH_URL: {{ GEONAMES_SEARCH_URL }}
    POSTALCODE_SEARCH_URL: {{ GEONAMES_POSTALCODE_SEARCH_URL }}
    COORDINATE_SEARCH_URL: {{ GEONAMES_COORDINATE_SEARCH_URL }}
    #use the ISO CODE (e.g. NL)
    COUNTRY: {{ GEONAMES_COUNTRY }}
    USERNAME: {{ GEONAMES_USERNAME }}
    MAXROWS: {{ GEONAMES_MAXROWS }}

STRIPE:
    # stripe connect master account client_id
    CLIENT_ID: {{ STRIPE_CLIENT_ID }}
    # stripe connect master account api_secret
    API_SECRET: {{ STRIPE_API_SECRET }}
    # stripe connect master account api_public
    API_PUBLIC: {{ STRIPE_API_PUBLIC }}

    # stripe makes call backs through this hook, and we customize it for security
    # for obscurity, turns into "https://host.com/stripe/HOOK_URL"
    # Example '/hook-ABXXGF'
    HOOK_URL: {{ STRIPE_HOOK_URL }}

    # should we act on test data or drop it
    # Example: False
    SKIP_TESTS: {{ STRIPE_SKIP_TESTS }}

    # webhooks are callbacks that allow the stripe server to notify us of charges.
    # unfortunately it's a little slow and has had some issues, so with USE_WEBHOOKS
    # set to False, we rely on the local information from our charges generated
    # in the stripe UI
    # Example: False
    USE_WEBHOOKS: {{ STRIPE_USE_WEBHOOKS }}

